Import("Random", null, "rand");
Import("Math", null, "sqrt", "e", "pi");
class Tree {
  constructor(n = 2) {
    this.layers = n;
  }
  map(x = rand()) {
    let split = 0.5;
    let lower = 0;
    let upper = 1;
    let path = [];
    iter((i) => {
      if (x >= split) {
        path.push(1);
        lower = split;
        split += (upper - split) / 2;
      } else {
        path.push(0);
        upper = split;
        split -= (split - lower) / 2;
      }
    }, range(0, this.layers));
    return path;
  }
  setLayers(n) {
    this.layers = n;
  }
  optimize(x) {
    let split = 0.5;
    let lower = 0;
    let upper = 1;
    let fLower = null;
    let fUpper = null;
    let path = [];
    let l = 0;
    while (NOR(fUpper == upper, fLower == lower)) {
      if (x >= split) {
        path.push(1);
        let s = lower;
        lower = split;
        fLower = s;
        split += (upper - split) / 2;
      } else {
        path.push(0);
        let s = upper;
        upper = split;
        fUpper = s;
        split -= (split - lower) / 2;
      }
      l++;
    }
    return l;
  }
}
let tree = new Tree();
Import("HtmlGUI", "gui");
function draw(x) {
  tree.setLayers(tree.optimize(x));
  let c = gui.new("canvas");
  c.style.margin = "20px";
  const WIDTH = 256;
  const HEIGHT = 256;
  c.dimensions(WIDTH, HEIGHT + 50);
  let w = int(WIDTH / sqrt(tree.layers));
  let h = int(HEIGHT / sqrt(tree.layers));
  let line = 0;
  For(
    (X) => {
      For(
        (Y) => {
          c.rect(
            X * w - w/4,
            Y * h - h/4,
            w,
            h,
            tree.map(x)[int(Y * sqrt(tree.layers)) + int(X)] ? "lime" : "red"
          );
        },
        0,
        sqrt(tree.layers)
      );
    },
    0,
    sqrt(tree.layers)
  );
  c.text(WIDTH / 2, HEIGHT + 50, x, "black");
  c.load();
}
